using ICSharpCode.AvalonEdit.Highlighting;
using ICSharpCode.AvalonEdit.Highlighting.Xshd;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Forms;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Xml;

namespace RoskiTutorial
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        //loads txt files into listbox
        public void ReloadScripts()
        {
            this.Listbox.Items.Clear();
            foreach (FileInfo fileInfo in new DirectoryInfo("./Scripts").GetFiles("*.txt"))
            {
                this.Listbox.Items.Add(fileInfo.Name);
            }
            foreach (FileInfo fileInfo2 in new DirectoryInfo("./Scripts").GetFiles("*.lua"))
            {
                this.Listbox.Items.Add(fileInfo2.Name);
            }
        }


        FileSystemWatcher files = new FileSystemWatcher();

        //allows u to use animations
        Storyboard StoryBoard = new Storyboard();
        TimeSpan duration = TimeSpan.FromMilliseconds(500);
        TimeSpan duration2 = TimeSpan.FromMilliseconds(1000);





        private IEasingFunction Smooth
        {
            get;
            set;
        }
       = new QuarticEase
       {
           EasingMode = EasingMode.EaseInOut
       };

        public void Fade(DependencyObject Object)
        {
            DoubleAnimation FadeIn = new DoubleAnimation()
            {
                From = 0.0,
                To = 1.0,
                Duration = new Duration(duration),
            };
            Storyboard.SetTarget(FadeIn, Object);
            Storyboard.SetTargetProperty(FadeIn, new PropertyPath("Opacity", 1));
            StoryBoard.Children.Add(FadeIn);
            StoryBoard.Begin();
        }


        public void FadeOut(DependencyObject Object)
        {
            DoubleAnimation Fade = new DoubleAnimation()
            {
                From = 1.0,
                To = 0.0,
                Duration = new Duration(duration),
            };
            Storyboard.SetTarget(Fade, Object);
            Storyboard.SetTargetProperty(Fade, new PropertyPath("Opacity", 1));
            StoryBoard.Children.Add(Fade);
            StoryBoard.Begin();
        }

        public void ObjectShift(DependencyObject Object, Thickness Get, Thickness Set)
        {
            ThicknessAnimation Animation = new ThicknessAnimation()
            {
                From = Get,
                To = Set,
                Duration = duration2,
                EasingFunction = Smooth,
            };
            Storyboard.SetTarget(Animation, Object);
            Storyboard.SetTargetProperty(Animation, new PropertyPath(MarginProperty));
            StoryBoard.Children.Add(Animation);
            StoryBoard.Begin();
        }

        public MainWindow()
        {
            InitializeComponent();
            Directory.CreateDirectory("scripts");//creates folder
            Directory.CreateDirectory("bin");//creates a folder

            Stream xshd_stream = File.OpenRead(Environment.CurrentDirectory + @"\bin\" + "lua.xshd");
            XmlTextReader xshd_reader = new XmlTextReader(xshd_stream);
            Ava.SyntaxHighlighting = HighlightingLoader.Load(xshd_reader, HighlightingManager.Instance);


        }

        private async void Border_MouseDown(object sender, MouseButtonEventArgs e)
        {
            //Fadeout animation
            this.FadeOut(this.Clear);
            this.FadeOut(this.Main1);
            this.FadeOut(this.Main);
            this.FadeOut(this.Exit);
            this.FadeOut(this.mini);
            this.FadeOut(this.Settings);
            this.FadeOut(this.Redo);
            this.FadeOut(this.Undo);
            this.FadeOut(this.Open);
            this.FadeOut(this.Save);
            this.FadeOut(this.Execute);
            this.FadeOut(this.Inject);
            this.FadeOut(this.Ava);
            this.FadeOut(this.Listbox);
            this.FadeOut(this.SetBorder);

            await Task.Delay(1000); //closes after 1 second
            Environment.Exit(0);
        }

        private void Border_MouseDown_1(object sender, MouseButtonEventArgs e)
        {

            //makes panel dragable
            this.DragMove();
        }

        private void Inject_Click(object sender, RoutedEventArgs e)
        {
            //your inject code
        }

        private void Execute_Click(object sender, RoutedEventArgs e)
        {
            //your execute code
        }

        private void Execute_Copy_Click(object sender, RoutedEventArgs e)
        {
            //clear text
            Ava.Clear();
        }

        private void Execute_Copy2_Click(object sender, RoutedEventArgs e)
        {
            // Create OpenFileDialog
            Microsoft.Win32.OpenFileDialog openFileDlg = new Microsoft.Win32.OpenFileDialog();

            // Launch OpenFileDialog by calling ShowDialog method
            Nullable<bool> result = openFileDlg.ShowDialog();
            // Get the selected file name and display in a TextBox.
            // Load content of file in a TextBlock
            if (result == true)
            {
                Ava.Text = openFileDlg.FileName;
                Ava.Text = System.IO.File.ReadAllText(openFileDlg.FileName);
            }
        }

        private void Execute_Copy1_Click(object sender, RoutedEventArgs e)
        {
            //opens savefile dialog
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.Filter = "Lua Scripts (*.lua)|*.lua|Txt Scripts (*.txt)|*.txt";
            saveFileDialog.Title = "Save Scripts";
            saveFileDialog.InitialDirectory = System.Windows.Forms.Application.StartupPath;
            if (saveFileDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                File.WriteAllText(saveFileDialog.FileName, this.Ava.Text);
            }
        }

        private void Execute_Copy4_Click(object sender, RoutedEventArgs e)
        {
            //redo text
            Ava.Redo();
        }

        private void Execute_Copy3_Click(object sender, RoutedEventArgs e)
        {
            //undo text
            Ava.Undo();
        }

        private void Grid_Loaded(object sender, RoutedEventArgs e)
        {
            //Fade in anim
            this.Fade(this.Main1);
            this.Fade(this.Exit);
            this.Fade(this.mini);
            this.Fade(this.Settings);
            this.Fade(this.Redo);
            this.Fade(this.Undo);
            this.Fade(this.Open);
            this.Fade(this.Save);
            this.Fade(this.Execute);
            this.Fade(this.Inject);
            this.Fade(this.Ava);
            this.Fade(this.Listbox);
            this.Fade(this.SetBorder);
            //loads scripts
            this.Listbox.Items.Clear();
            foreach (FileInfo fileInfo in new DirectoryInfo("./scripts").GetFiles("*.txt"))
            {
                this.Listbox.Items.Add(fileInfo.Name);
            }
            foreach (FileInfo fileInfo2 in new DirectoryInfo("./scripts").GetFiles("*.lua"))
            {
                this.Listbox.Items.Add(fileInfo2.Name);
            }

        }

        private void mini_MouseDown(object sender, MouseButtonEventArgs e)
        {
            //minimize window
            WindowState = WindowState.Minimized;
        }

        private void Setexit_MouseDown(object sender, MouseButtonEventArgs e)
        {
            //returns the settings menu hidden
            ObjectShift(SetBorder, SetBorder.Margin, new Thickness(504, 97, 0, 0));
            ObjectShift(Discord, Discord.Margin, new Thickness(521, 251, 0, 0));
            ObjectShift(Kill, Kill.Margin, new Thickness(521, 290, 0, 0));
            ObjectShift(Opa, Opa.Margin, new Thickness(511, 185, 0, 0));
            ObjectShift(Top, Top.Margin, new Thickness(511, 142, 0, 0));

        }

        private void Settings_Click(object sender, RoutedEventArgs e)
        {
            //pops settings window out
            ObjectShift(SetBorder, SetBorder.Margin, new Thickness(632, 97, 0, 0));
            ObjectShift(Discord, Discord.Margin, new Thickness(648, 251, 0, 0));
            ObjectShift(Kill, Kill.Margin, new Thickness(648, 290, 0, 0));
            ObjectShift(Opa, Opa.Margin, new Thickness(639, 168, 0, 0));
            ObjectShift(Top, Top.Margin, new Thickness(639, 130, 0, 0));
        }

        private void CheckBox_Checked(object sender, RoutedEventArgs e)
        {
            //when check topmost is on
            this.Topmost = true;
        }

        private void CheckBox_Unchecked(object sender, RoutedEventArgs e)
        {
            //when unchecked topmost is off
            this.Topmost = false;
        }

        private void CheckBox_Checked_1(object sender, RoutedEventArgs e)
        {
            //when check transparency is on
            this.Opacity = .5;
        }

        private void CheckBox_Unchecked_1(object sender, RoutedEventArgs e)
        {
            //when checked transparency is off
            this.Opacity = 100;
        }

        private void Kill_Click(object sender, RoutedEventArgs e)
        {
            //closes (kills) roblox
            Process[] roblox = Process.GetProcesses();
            foreach (Process openedroblox in roblox)
            {
                bool flag = openedroblox.ProcessName == "RobloxPlayerBeta";
                if (flag)
                {
                    openedroblox.Kill();
                    {

                    }
                }

            }
        }

        private void Discord_Click(object sender, RoutedEventArgs e)
        {
            //opens up the link
            Process.Start("your discord invite link");
        }
    }
}
